<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:p="http://www.springframework.org/schema/p" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="
    http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop 
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/tx 
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/context 
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/data/jpa
       http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
       http://www.springframework.org/schema/jee  
       http://www.springframework.org/schema/jee/spring-jee.xsd
       http://www.springframework.org/schema/task   
       http://www.springframework.org/schema/task/spring-task.xsd 
       http://www.springframework.org/schema/data/repository
       http://www.springframework.org/schema/data/repository/spring-repository.xsd"
       default-lazy-init="true">

    <description>Spring公共配置</description>

    <!-- 引入配置文件 -->
    <context:property-placeholder ignore-unresolvable="true"
                                  location="classpath*:/application.properties"/>

    <!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->
    <context:component-scan base-package="org.lua">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:exclude-filter type="annotation"
                                expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
    </context:component-scan>

    <!-- Jpa Entity Manager 配置 -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter"/>
        <property name="packagesToScan" value="org.lua.entity"/>
        <property name="jpaProperties">
            <props>
                <!-- 命名规则 My_NAME->MyName -->
                <prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
                <prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQLDialect</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <prop key="hibernate.jdbc.fetch_size">50</prop>
                <prop key="hibernate.jdbc.batch_size">20</prop>
            </props>
        </property>
    </bean>

    <!-- 数据库方言 -->
    <bean id="hibernateJpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
        <property name="databasePlatform" value="org.hibernate.dialect.PostgreSQLDialect"/>
    </bean>

    <!-- Spring Data Jpa配置 -->
    <jpa:repositories base-package="org.lua.repository" repository-impl-postfix="Impl"
                      transaction-manager-ref="transactionManager"
                      factory-class="org.lua.repository.base.BaseRepositoryFactoryBean"
                      entity-manager-factory-ref="entityManagerFactory"/>

    <!-- Jpa 事务配置 -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>

    <!-- smtp 邮件服务器 -->
    <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="${mail.host}"/>
        <property name="port" value="${mail.port}"></property>
        <property name="username" value="${mail.username}"/>
        <property name="password" value="${mail.password}"/>
        <property name="javaMailProperties">
            <props>
                <prop key="mail.smtp.auth">true</prop>
                <prop key="mail.smtp.timeout">25000</prop>
            </props>
        </property>
    </bean>

    <!-- 模板引擎 -->
    <bean id="freeMarkerConfigurer" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
        <property name="templateLoaderPaths" value="classpath:template"/>
        <property name="freemarkerSettings">
            <props>
                <prop key="template_update_delay">0</prop>
                <prop key="default_encoding">UTF-8</prop>
                <prop key="output_encoding">UTF-8</prop>
                <prop key="locale">zh_CN</prop>
                <prop key="date_format">yyyy-MM-dd</prop>
                <prop key="time_format">HH:mm:ss</prop>
                <prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>
            </props>
        </property>
    </bean>

    <!-- 使用annotation定义事务 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>

    <!-- JSR303 Validator定义 -->
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"/>

    <!-- JDBCTemplate 定义 -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"
          p:dataSource-ref="dataSource"/>


    <!-- 数据源配置, 使用Tomcat JDBC连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1"/>
        <property name="minIdle" value="1"/>
        <property name="maxActive" value="${jdbc.pool.maxActive}"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <property name="validationQuery" value="SELECT 1"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="false"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>

    </bean>
    <!--
    <bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource" destroy-method="close">
        Connection Info
        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />

        Connection Pooling Info
        <property name="maxActive" value="${jdbc.pool.maxActive}" />
        <property name="maxIdle" value="${jdbc.pool.maxIdle}" />
        <property name="defaultAutoCommit" value="false" />
        回收被遗弃的（一般是忘了释放的）数据库连接到连接池中。
        <property name="removeAbandoned" value="false" />
        数据库连接过多长时间不用将被视为被遗弃而收回连接池中。
        <property name="removeAbandonedTimeout" value="150" />
        将被遗弃的数据库连接的回收记入日志。
        <property name="logAbandoned" value="false" />
        连接Idle一个小时后超时
        <property name="timeBetweenEvictionRunsMillis" value="3600000" />
        <property name="minEvictableIdleTimeMillis" value="3600000" />
    </bean> -->

    <!-- 多语言配置 -->
    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basenames">
            <list>
                <value>message</value>
            </list>
        </property>

        <property name="defaultEncoding" value="UTF-8"/>
    </bean>


    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver">
        <property name="cookieName" value="clientlanguage"/>
        <property name="cookieMaxAge" value="94608000"/>
        <property name="defaultLocale" value="zh"/>
    </bean>

    <!--     <bean id="exceptionHandler" class="com.joven.jvcore.exception.JovenExceptionHandler"/> -->

    <!-- <bean id="schedulerTaskService" class="com.joven.jvcore.service.scheduledtask.ScheduledTaskService" />
    
    <task:scheduled-tasks>  
        <task:scheduled ref="schedulerTaskService" method="updatePersonData" cron="0 0 0 1 * ?"/>
    </task:scheduled-tasks>   -->
    <!-- 数据源配置,使用应用服务器的数据库连接池 -->
    <!--<jee:jndi-lookup id="dataSource" jndi-name="java:comp/env/jdbc/ExampleDB" />-->

    <!-- 定时器 -->
    <!-- <bean id="schedulerService" class="com.joven.jvcore.service.scheduledtask.ScheduledTaskService" />


    <task:scheduled-tasks>
        <task:scheduled ref="schedulerService" method="webServiceData" cron="0 0 18 * * ? "/>
    </task:scheduled-tasks> -->


    <!-- <bean id="schedulerService" class=" com.joven.service.impl.SchedulerServiceImpl" /> -->

    <!-- <task:scheduled-tasks>
        每天中午１２点通知明天的值班版主值班
        <task:scheduled ref="schedulerService" method="sendMailAllSayPersonTomorrowOnDuty" cron="0 0 10 * * ? " />

        每个月的25号 10:00生成一次
         <task:scheduled ref="schedulerService" method="updateCreatePlanForMonth" cron="0 0 21 25 * ? " />

         每个月生成月计划
         <task:scheduled ref="schedulerService" method="sendMeetingNotification" cron="0 0,5,10,15,20,25,30,35,40,45,50,55 * * * ? " />

         每天晚上11:00 更换版主 22
         <task:scheduled ref="schedulerService" method="updateModularEveryDay" cron="0 0 22 * * ? " />
    </task:scheduled-tasks> -->
    <!-- 生成日报 -->
    <!-- <bean id="dailyService" class="com.joven.jvcore.service.nbs.stat.DailyWorkService" />
    <task:scheduled-tasks>
        <task:scheduled ref="dailyService" method="create" cron="0 00 23 * * ? "/>
        <task:scheduled ref="dailyService" method="late" cron="0 00 08 * * ? "/>
    </task:scheduled-tasks> -->

    <!-- 线程池 -->
    <bean id="taskExecutor" name="taskExecutor"
          class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <property name="corePoolSize" value="5"/>
        <property name="maxPoolSize" value="20"/>
        <property name="waitForTasksToCompleteOnShutdown" value="true"/>
    </bean>

</beans>